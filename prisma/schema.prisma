// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String
  Booking        Booking[]
  Review         Review[]
}

model Host {
  id             String     @id @default(uuid())
  username       String     @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String
  aboutMe        String
  listings       Property[]
}

model Review {
  id         String @id @default(uuid())
  userId     String
  propertyId String
  rating     Int
  comment    String

  Property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([propertyId])
  @@index([userId])
}

model Amenity {
  id         String     @id @default(uuid())
  name       String
  Properties Property[]
}

model Property {
  id            String  @id @default(uuid())
  hostId        String
  title         String
  description   String
  location      String
  pricePerNight Decimal @db.Decimal(10, 2)
  bedroomCount  Int
  bathroomCount Int
  maxGuestCount Int
  rating        Int

  Host      Host      @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Amenities Amenity[]
  Review    Review[]
  Booking   Booking[]

  @@index([hostId])
}

model Booking {
  id             String   @id @default(uuid())
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Int
  bookingStatus  String

  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([propertyId])
}
